{"version":3,"sources":["Context/Context.jsx","Form/SetupForm.jsx","Loading/LoadingScreen.jsx","Modal/Modal.jsx","App.js","reportWebVitals.js","index.js"],"names":["table","sports","history","politics","AppContext","createContext","AppProvider","children","useState","waiting","setWaiting","loading","setLoading","questions","setQuestions","index","setIndex","correct","setCorrect","error","setError","amount","category","difficulty","quiz","setQuiz","modal","setModal","fetchQuestions","url","a","axios","catch","err","console","log","response","data","results","length","nextQuestion","oldIndex","Provider","value","checkAnswers","oldState","closeModal","handleChange","e","name","target","handleSubmit","preventDefault","useGlobalContext","useContext","SetupForm","className","htmlFor","type","id","onChange","min","max","onClick","Loading","Modal","toFixed","App","nextQuestions","incorrect_answers","correct_answer","question","answers","tempIndex","Math","floor","random","push","dangerouslySetInnerHTML","__html","map","answer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6bac645a.chunk.js","sourcesContent":["import { useState, useContext, createContext } from \"react\";\nimport axios from \"axios\";\n\nconst table = {\n  sports: 21,\n  history: 23,\n  politics: 24,\n};\n\nconst AppContext = createContext();\nconst AppProvider = ({ children }) => {\n  const [waiting, setWaiting] = useState(true); //waiting\n  const [loading, setLoading] = useState(false); //loading\n  const [questions, setQuestions] = useState([]); //questions\n  const [index, setIndex] = useState(0); //index\n  const [correct, setCorrect] = useState(0); //correct\n  const [error, setError] = useState(false); //error\n  const [quiz, setQuiz] = useState({\n    amount: 10,\n    category: \"sports\",\n    difficulty: \"easy\",\n  });\n  const [modal, setModal] = useState(false);\n  //fetchQuestions\n\n  const fetchQuestions = async (url) => {\n    setLoading(true);\n    setWaiting(false);\n    const response = await axios(url).catch((err) => console.log(err));\n\n    if (response) {\n      const data = response.data.results;\n      if (data.length > 0) {\n        setQuestions(data);\n        setLoading(false);\n        setWaiting(false);\n        setError(false);\n      } else {\n        setWaiting(true);\n        setLoading(true);\n      }\n    } else {\n      setWaiting(true);\n    }\n  };\n  const openModal = () => {\n    setModal(true);\n  };\n\n  const closeModal = () => {\n    setModal(false);\n    setWaiting(true);\n    setCorrect(0);\n  };\n\n  const nextQuestion = () => {\n    setIndex((oldIndex) => {\n      const index = oldIndex + 1;\n      if (index > questions.length - 1) {\n        openModal();\n        return 0;\n      } else {\n        return index;\n      }\n    });\n  };\n  const checkAnswers = (value) => {\n    if (value) {\n      setCorrect((oldState) => oldState + 1);\n    }\n    nextQuestion();\n  };\n\n  const handleChange = (e) => {\n    const name = e.target.name;\n    const value = e.target.value;\n    setQuiz({ ...quiz, [name]: value });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const { amount, difficulty, category } = quiz;\n    const url = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&category=${table[category]}&type=multiple`;\n    fetchQuestions(url);\n  };\n\n  return (\n    <AppContext.Provider\n      value={{\n        waiting,\n        loading,\n        questions,\n        index,\n        correct,\n        error,\n        modal,\n        nextQuestion,\n        checkAnswers,\n        closeModal,\n        quiz,\n        handleChange,\n        handleSubmit,\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\nexport const useGlobalContext = () => {\n  return useContext(AppContext);\n};\n\nexport { AppContext, AppProvider };\n","import { useGlobalContext } from \"../Context/Context\";\nconst SetupForm = () => {\n  const { quiz, handleChange, handleSubmit, error } = useGlobalContext();\n  return (\n    <main>\n      <section className=\"quiz quiz-small\">\n        <form className=\"setup-form\">\n          <h2>setup quiz</h2>\n          <div className=\"form-control\">\n            <label htmlFor=\"amount\">number of questions</label>\n            <input\n              type=\"number\"\n              name=\"amount\"\n              id=\"amount\"\n              value={quiz.amount}\n              onChange={handleChange}\n              className=\"form-input\"\n              min={1}\n              max={50}\n            />\n          </div>\n          <div className=\"form-control\">\n            <label htmlFor=\"category\">category</label>\n            <select\n              name=\"category\"\n              id=\"category\"\n              className=\"form-input\"\n              value={quiz.category}\n              onChange={handleChange}\n            >\n              <option value=\"sports\">sports</option>\n              <option value=\"history\">history</option>\n              <option value=\"politics\">politics</option>\n            </select>\n          </div>\n          <div className=\"form-control\">\n            <label htmlFor=\"difficulty\">difficulty</label>\n            <select\n              name=\"difficulty\"\n              id=\"difficulty\"\n              className=\"form-input\"\n              onChange={handleChange}\n              value={quiz.difficulty}\n            >\n              <option value=\"ease\">easy</option>\n              <option value=\"medium\">medium</option>\n              <option value=\"hard\">difficult</option>\n            </select>\n          </div>\n          {error && (\n            <p className=\"error\">can't generates questions , pls try again</p>\n          )}\n          <button type=\"submit\" className=\"submit-btn\" onClick={handleSubmit}>\n            start\n          </button>\n        </form>\n      </section>\n    </main>\n  );\n};\nexport default SetupForm;\n","const Loading = () => {\n  return (\n    <main>\n      <div className=\"loading\"></div>\n    </main>\n  );\n};\n\nexport default Loading;\n","import { useGlobalContext } from \"../Context/Context\";\nconst Modal = () => {\n  const { modal, closeModal, correct, questions } = useGlobalContext();\n  return (\n    <div className={`${modal ? \"modal-container isOpen\" : \"modal-container\"}`}>\n      <div className=\"modal-content\">\n        <h2>congrats</h2>\n        <p>You answered {((correct / questions.length) * 100).toFixed(0)}%</p>\n        <button className=\"close-btn\" onClick={closeModal}>\n          play again\n        </button>\n      </div>\n    </div>\n  );\n};\nexport default Modal;\n","import SetupForm from \"./Form/SetupForm\";\nimport Loading from \"./Loading/LoadingScreen\";\nimport Modal from \"./Modal/Modal.jsx\";\nimport { useGlobalContext } from \"./Context/Context.jsx\";\nfunction App() {\n  const {\n    waiting,\n    loading,\n    questions,\n    index,\n    correct,\n    nextQuestions,\n    checkAnswers,\n  } = useGlobalContext();\n  if (waiting) {\n    return <SetupForm />;\n  }\n  if (loading) {\n    return <Loading />;\n  }\n\n  const { incorrect_answers, correct_answer, question } = questions[index];\n  let answers = [...incorrect_answers];\n  const tempIndex = Math.floor(Math.random() * 4);\n  if (tempIndex === 3) {\n    answers.push(correct_answer);\n  } else {\n    answers.push(answers[tempIndex]);\n    answers[tempIndex] = correct_answer;\n  }\n  return (\n    <main>\n      <Modal />\n      <section className=\"quiz\">\n        {console.log(questions)}\n        <p className=\"correct-answers\">\n          correct answers: {correct}/{index}\n        </p>\n        <article className=\"container\">\n          <h2 dangerouslySetInnerHTML={{ __html: question }} />\n          <div className=\"btn-container\">\n            {answers.map((answer, index) => {\n              return (\n                <button\n                  key={index}\n                  className=\"answer-btn\"\n                  onClick={() => checkAnswers(correct_answer === answer)}\n                  dangerouslySetInnerHTML={{ __html: answer }}\n                />\n              );\n            })}\n          </div>\n        </article>\n        <button className=\"next-question\" onClick={nextQuestions}>\n          next questions\n        </button>\n      </section>\n    </main>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { AppProvider } from \"./Context/Context.jsx\";\nReactDOM.render(\n  <React.StrictMode>\n    <AppProvider>\n      <App />\n    </AppProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}